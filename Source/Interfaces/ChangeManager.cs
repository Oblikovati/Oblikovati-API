namespace Oblikovati.API;

/// <summary>
/// The ChangeManager object manages the processes involved in making changes to data and recording the change process.
/// </summary>
public interface ChangeManager : IEnumerable
{
    /// <summary>
    /// Returns the top-level parent application object.  When used the context of Inventor, an Application object is returned.  When used in the context of Apprentice, an ApprenticeServer object is returned.
    /// </summary>
    object Application { get; }
    /// <summary>
    /// Property that returns the Application object, the parent of the ChangeManager object.
    /// </summary>
    object Parent { get; }
    /// <summary>
    /// Returns an ObjectTypeEnum indicating this object's type.
    /// </summary>
    ObjectTypeEnum Type { get; }
    /// <summary>
    /// Property that returns the number of items in this collection.
    /// </summary>
    int Count { get; }
    /// <summary>
    /// Returns the specified object in the collection.
    /// </summary>
    ChangeDefinitions this[object Index] { get; }
    /// <summary>
    /// Method that creates a new collection that will house all of the ChangeDefinition objects to be generated by the corresponding client. The newly created ChangeDefinitions object is returned.
    /// </summary>
    /// <param name="ClientId">Input string that uniquely identifies the client. Suggestions are the 'ProgID' of the Add-In creating the resource or its CLSID in a string form, e.g. "{C9A6C580-3817-11D0-BE4E-080036E87B02}", although any unique string is valid. If you do not use a CLSID or a ProgID, it is recommended that you add your application name to the ClientId to help eliminate naming conflicts.</param>
    /// <returns></returns>
    [PreserveSig]
    ChangeDefinitions Add([In] [MarshalAs(UnmanagedType.BStr)] string ClientId);
    /// <summary>
    /// Method that retrieves the object with the specified string. The script key should have been generated using the GetScriptKeyFromObject method and the document should be in the same or similar state as when the script key was generated.
    /// </summary>
    /// <param name="ScriptKey">Script key string of object to retrieve.</param>
    /// <returns></returns>
    [PreserveSig]
    object GetObjectFromScriptKey([In] [MarshalAs(UnmanagedType.BStr)] string ScriptKey);
    /// <summary>
    /// Method that generates a key (identifier) for the input object. This key is suitable to use in constructing the Inputs argument of the OnWriteToScript event on the ChangeProcessor object. This key is only intended to be able to identify the specified object in the current state of the document (this is not a robust persistent reference key).
    /// </summary>
    /// <param name="Object">Object from which to generate key.</param>
    /// <returns></returns>
    [PreserveSig]
    string GetScriptKeyFromObject([In] [MarshalAs(UnmanagedType.IDispatch)] object Object);
}
