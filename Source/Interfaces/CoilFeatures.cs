namespace Oblikovati.API;

/// <summary>
/// The CoilFeatures collection object provides access to all of the objects in a component definition and provides methods to create additional CoilFeature objects.
/// </summary>
public interface CoilFeatures : IEnumerable
{
    /// <summary>
    /// Returns an ObjectTypeEnum indicating this object's type.
    /// </summary>
    ObjectTypeEnum Type { get; }
    /// <summary>
    /// Returns the top-level parent application object.  When used the context of Inventor, an Application object is returned.  When used in the context of Apprentice, an ApprenticeServer object is returned.
    /// </summary>
    object Application { get; }
    /// <summary>
    /// Returns the specified CoilFeature object from the collection.
    /// </summary>
    CoilFeature this[object Index] { get; }
    /// <summary>
    /// Property that returns the number of items in this collection.
    /// </summary>
    int Count { get; }
    /// <summary>
    /// Method that creates a new CoilFeature whose extent is defined by specifying the pitch and number of revolutions. The new CoilFeature is returned.
    /// </summary>
    /// <param name="Profile">Input object used to define the shape of the coil.</param>
    /// <param name="AxisEntity">Input linear entity that defines the axis of the revolution. Valid input is either a sketch line or work axis. The axis entity must not intersect the input profile.</param>
    /// <param name="Pitch">Input Variant that defines the pitch of the coil feature. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are centimeters. If a string is input, the units can be specified as part of the string or it will default to the current length units of the document.</param>
    /// <param name="Revolution">Input Variant that defines the number of revolutions of the coil feature. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, it is unitless. If a string is input it must resolve to a unitless value.</param>
    /// <param name="Operation">Input constant that indicates the type of operation to perform. Valid input is kJoinOperation, kCutOperation, kIntersectOperation, kSurfaceOperation.</param>
    /// <param name="AxisDirectionReversed">Optional input Boolean that indicates a reversal of axis direction. The default is False, which means the axis direction will be in the same direction as the natural direction of the input axis entity.</param>
    /// <param name="ClockwiseRotation">Optional input Boolean that defines whether the rotation of the coil is clockwise or counter-clockwise. The default is False, indicating counter-clockwise rotation.</param>
    /// <param name="TaperAngle">Optional input Variant that defines the taper angle of the coil feature. If this argument is not supplied it defaults to zero. It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="FlatStartType">Optional input Boolean that indicates the coil end type. The default is False indicating a natural end type. True indicates a flat start type.</param>
    /// <param name="StartTransitionAngle">Optional input Variant that defines the transition angle for the coil's end. This argument is used only if the FlatStartType argument is True, otherwise it is ignored. The default value for this argument is p/2 (90 degrees). It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="StartFlatAngle">Optional input Variant that defines the flat angle for the coil's end. This argument is used only if FlatStartType is True, otherwise it is ignored. The default value for this argument is p/2 (90 degrees). It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="FlatEndType">Optional input Boolean that indicates the coil end type. The default is False indicating a natural end type. True indicates a flat end type.</param>
    /// <param name="EndTransitionAngle">Optional input Variant that defines the transition angle for the coil's end. This argument is used only if FlatEndType is True, otherwise it is ignored. The default value for this argument is p/2 (90 degrees). It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="EndFlatAngle">Optional input variant that defines the flat angle for the coil's end. This argument is used only if FlatEndType is True, otherwise it is ignored. The default value for this argument is p/2 (90 degrees). It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <returns></returns>
    [PreserveSig]
    CoilFeature AddByPitchAndRevolution([In] [MarshalAs(UnmanagedType.Interface)] Profile Profile, [In] [MarshalAs(UnmanagedType.IDispatch)] object AxisEntity, [In] [MarshalAs(UnmanagedType.Struct)] object Pitch, [In] [MarshalAs(UnmanagedType.Struct)] object Revolution, [In] PartFeatureOperationEnum Operation, [In] bool? AxisDirectionReversed = false, [In] bool? ClockwiseRotation = false, [In] [MarshalAs(UnmanagedType.Struct)] object? TaperAngle = default, [In] bool? FlatStartType = false, [In] [MarshalAs(UnmanagedType.Struct)] object? StartTransitionAngle = default, [In] [MarshalAs(UnmanagedType.Struct)] object? StartFlatAngle = default, [In] bool? FlatEndType = false, [In] [MarshalAs(UnmanagedType.Struct)] object? EndTransitionAngle = default, [In] [MarshalAs(UnmanagedType.Struct)] object? EndFlatAngle = default);
    /// <summary>
    /// Method that creates a new CoilFeature whose extent is defined by specifying the number of revolutions and the total height. The new CoilFeature is returned.
    /// </summary>
    /// <param name="Profile">Input object used to define the shape of the coil.</param>
    /// <param name="AxisEntity">Input linear entity that defines the axis of the revolution. Valid input is either a sketch line or work axis. The axis entity must not intersect the input profile.</param>
    /// <param name="Revolution">Input Variant that defines the number of revolutions of the coil feature. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, it is unitless. If a string is input it must resolve to a unitless value.</param>
    /// <param name="Height">Input Variant that defines the height of the coil feature. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are centimeters. If a string is input, the units can be specified as part of the string or it will default to the current length units of the document.</param>
    /// <param name="Operation">Input constant that indicates the type of operation to perform. Valid input is kJoinOperation, kCutOperation, kIntersectOperation, kSurfaceOperation.</param>
    /// <param name="AxisDirectionReversed">Optional input Boolean that indicates a reversal of axis direction. The default is False, which means the axis direction will be in the same direction as the natural direction of the input axis entity.</param>
    /// <param name="ClockwiseRotation">Optional input Boolean that defines whether the rotation of the coil is clockwise or counter-clockwise. The default is False, indicating counter-clockwise rotation.</param>
    /// <param name="TaperAngle">Optional input Variant that defines the taper angle of the coil feature. If this argument is not supplied it defaults to zero. It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="FlatStartType">Optional input Boolean that indicates the coil's end type. The default is False indicating a natural end type. True indicates a flat start type.</param>
    /// <param name="StartTransitionAngle">Optional input Variant that defines the transition angle for the coil's end. This argument is used only if FlatStartType is True, otherwise it is ignored. The default value for this argument is p/2 (90 degrees). It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="StartFlatAngle">Optional input Variant that defines the flat angle for the coil's end. This argument is used only if FlatStartType is True, otherwise it is ignored. The default value for this argument is p/2 (90 degrees). It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="FlatEndType">Optional input Boolean that indicates the coil's end type. The default is False indicating a natural end type. True indicates a flat end type.</param>
    /// <param name="EndTransitionAngle">Optional input Variant that defines the transition angle for the coil's end. This argument is used only if FlatEndType is True, otherwise it is ignored. The default value for this argument is p/2 (90 degrees). It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="EndFlatAngle">Optional input Variant that defines the flat angle for the coil's end. This argument is used only if FlatEndType is True, otherwise it is ignored. The default value for this argument is p/2 (90 degrees). It can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <returns></returns>
    [PreserveSig]
    CoilFeature AddByRevolutionAndHeight([In] [MarshalAs(UnmanagedType.Interface)] Profile Profile, [In] [MarshalAs(UnmanagedType.IDispatch)] object AxisEntity, [In] [MarshalAs(UnmanagedType.Struct)] object Revolution, [In] [MarshalAs(UnmanagedType.Struct)] object Height, [In] PartFeatureOperationEnum Operation, [In] bool? AxisDirectionReversed = false, [In] bool? ClockwiseRotation = false, [In] [MarshalAs(UnmanagedType.Struct)] object? TaperAngle = default, [In] bool? FlatStartType = false, [In] [MarshalAs(UnmanagedType.Struct)] object? StartTransitionAngle = default, [In] [MarshalAs(UnmanagedType.Struct)] object? StartFlatAngle = default, [In] bool? FlatEndType = false, [In] [MarshalAs(UnmanagedType.Struct)] object? EndTransitionAngle = default, [In] [MarshalAs(UnmanagedType.Struct)] object? EndFlatAngle = default);
    /// <summary>
    /// Method that creates a new CoilFeature whose extent is defined by specifying pitch and total height. The new CoilFeature is returned.
    /// </summary>
    /// <param name="Profile">Input object used to define the shape of the coil.</param>
    /// <param name="AxisEntity">Input linear entity that defines the axis of the revolution. Valid input is either a sketch line or work axis. The axis entity must not intersect the input profile.</param>
    /// <param name="Pitch">Input Variant that defines the pitch of the coil feature. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are centimeters. If a string is input, the units can be specified as part of the string or it will default to the current length units of the document.</param>
    /// <param name="Height">Input Variant that defines the height of the coil feature. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are centimeters. If a string is input, the units can be specified as part of the string or it will default to the current length units of the document.</param>
    /// <param name="Operation">Input constant that indicates the type of operation to perform. Valid input is kJoinOperation, kCutOperation, kIntersectOperation, kSurfaceOperation.</param>
    /// <param name="AxisDirectionReversed">Optional input Boolean that indicates a reversal of axis direction. The default is False, which means the axis direction will be in the same direction as the natural direction of the input axis entity.</param>
    /// <param name="ClockwiseRotation">Optional input Boolean that defines whether the rotation of the coil is clockwise or counter-clockwise. The default is False, indicating counter-clockwise rotation.</param>
    /// <param name="TaperAngle">Optional input Variant that defines the taper angle of the coil feature. If not supplied it defaults to zero. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="FlatStartType">Optional input Boolean that indicates the coil end type. The default is False indicating a natural end type. True indicates a flat start type.</param>
    /// <param name="StartTransitionAngle">Optional input Variant that defines the transition angle for the coil's end. This is used only if FlatStartType is True, otherwise this argument is ignored. The default value for this argument is p/2 (90 degrees). This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="StartFlatAngle">Optional input Variant that defines the flat angle for the coil's end. This is used only if FlatStartType is True, otherwise this argument is ignored. The default value for this argument is p/2 (90 degrees). This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="FlatEndType">Optional input Boolean that indicates the coil's end type. The default is False, indicating a natural end type. True indicates a flat end type.</param>
    /// <param name="EndTransitionAngle">Optional input Variant that defines the transition angle for the coil's end. This is used only if FlatEndType is True, otherwise this argument is ignored. The default value for this argument is p/2 (90 degrees). This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <param name="EndFlatAngle">Optional input Variant that defines the flat angle for the coil's end. This is used only if FlatEndType is True. The default value for this argument is p/2 (90 degrees). This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are radians. If a string is input, the units can be specified as part of the string or it will default to the current angle units of the document.</param>
    /// <returns></returns>
    [PreserveSig]
    CoilFeature AddByPitchAndHeight([In] [MarshalAs(UnmanagedType.Interface)] Profile Profile, [In] [MarshalAs(UnmanagedType.IDispatch)] object AxisEntity, [In] [MarshalAs(UnmanagedType.Struct)] object Pitch, [In] [MarshalAs(UnmanagedType.Struct)] object Height, [In] PartFeatureOperationEnum Operation, [In] bool? AxisDirectionReversed = false, [In] bool? ClockwiseRotation = false, [In] [MarshalAs(UnmanagedType.Struct)] object? TaperAngle = default, [In] bool? FlatStartType = false, [In] [MarshalAs(UnmanagedType.Struct)] object? StartTransitionAngle = default, [In] [MarshalAs(UnmanagedType.Struct)] object? StartFlatAngle = default, [In] bool? FlatEndType = false, [In] [MarshalAs(UnmanagedType.Struct)] object? EndTransitionAngle = default, [In] [MarshalAs(UnmanagedType.Struct)] object? EndFlatAngle = default);
    /// <summary>
    /// Method that creates a new CoilFeature that sweeps a specified angle. The new CoilFeature is returned.
    /// </summary>
    /// <param name="Profile">Input object used to define the shape of the coil.</param>
    /// <param name="AxisEntity">Input linear entity that defines the axis of the revolution. Valid input is either a sketch line or work axis. The axis entity must not intersect the input profile.</param>
    /// <param name="Pitch">Input Variant that defines the pitch of the coil feature. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are centimeters. If a string is input, the units can be specified as part of the string or it will default to the current length units of the document.</param>
    /// <param name="Revolution">Input Variant that defines the number of revolutions of the coil feature. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, it is unitless. If a string is input it must resolve to a unitless value.</param>
    /// <param name="Operation">Input constant that indicates the type of operation to perform. Valid input is kJoinOperation, kCutOperation, kIntersectOperation, kSurfaceOperation.</param>
    /// <param name="AxisDirectionReversed">Optional input Boolean that indicates a reversal of axis direction. The default is False, which means the axis direction will be in the same direction as the natural direction of the input axis entity.</param>
    /// <param name="ClockwiseRotation">Optional input Boolean that defines whether the rotation of the coil is clockwise or counter-clockwise. The default is False, indicating counter-clockwise rotation.</param>
    /// <returns></returns>
    [PreserveSig]
    CoilFeature AddSpiral([In] [MarshalAs(UnmanagedType.Interface)] Profile Profile, [In] [MarshalAs(UnmanagedType.IDispatch)] object AxisEntity, [In] [MarshalAs(UnmanagedType.Struct)] object Pitch, [In] [MarshalAs(UnmanagedType.Struct)] object Revolution, [In] PartFeatureOperationEnum Operation, [In] bool? AxisDirectionReversed = false, [In] bool? ClockwiseRotation = false);
}
